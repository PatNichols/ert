

1) The general approach to optimze the code was done in a few steps
   a) convert derivations of constants to other constants, e.g.
       a = 3.3
       b= log(a)
      can be conveted to a value of b which is contant. This particular
      method will only be noticable when optizimation is turned off
   b) convert pow(x,integer) to a series of multiplies. This replaces
      a several dozens of operations to only a few.
   c) convert pow(x,float y) to exp(y *log(x)). The exponenent function is
      faster than the power function. In this code there are
      4 power function of the same significand pow(fpt,blah). If we
      precompute the value of log(fpt), we get a big savings.
   d) convert the loops over floating point values to ones over integers.
   e) Apply openmp directives to allow the code to be multithreaded.
      This is biggest saving which can result in the code running over 6
      times faster on most machines 

2) Profile timings on a linux desktop circa 2011.
	CPU is Intel(R) Core(TM) i7-3820 CPU @ 3.60GHz with hyperthreading 
      
4) The main savings in serial time was the conversion of pow(fpt,x) to a
   exp(x*log(fpt)). The change in pow(x,integer) also contributed. 
   Surprisingly, converting constants derived from other constants did not result in any
   change when optimization was turned on leading me to suspect that the
   compiler was smart enough to make these changes behing the scenes. 
 



  